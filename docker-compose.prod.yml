services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    ports:
      - "4601:80"
    depends_on:
      - backend
    environment:
      - NODE_ENV=${NODE_ENV}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    networks:
      - photo-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - backend-uploads:/app/uploads
      - backend-temp:/app/temp
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - SERVER_URL=${SERVER_URL}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
    networks:
      - photo-network
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "4620:4620"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BROWSER_REDIRECT=false
    volumes:
      - minio-data:/data
    command: server /data --console-address ":4620" --address ":${MINIO_PORT}"
    networks:
      - photo-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${MINIO_PORT}/minio/health/live",
        ]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 40s

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        mc alias set myminio http://minio:${MINIO_PORT} $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} &&
        mc mb myminio/${MINIO_BUCKET_NAME} --ignore-existing &&
        echo 'âœ… MinIO bucket created successfully';
      "
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
    networks:
      - photo-network
    restart: "no"
networks:
  photo-network:
    driver: bridge
volumes:
  backend-uploads:
  backend-temp:
  minio-data:
